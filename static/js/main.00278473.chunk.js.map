{"version":3,"sources":["Components/Container/Container.styled.js","Components/Container/Container.jsx","Components/ContactForm/ContactForm.styled.js","Components/ContactForm/ContactForm.jsx","Components/ContactList/ContactList.styled.js","Components/ContactList/ContactList.jsx","Components/Filter/Filter.styled.js","Components/Filter/Filter.jsx","Components/App/App.jsx","index.js"],"names":["PhoneBook","styled","div","Title","h1","Container","title","children","Form","form","Input","input","Label","label","Button","button","Error","span","Name","p","Number","ContactForm","onSubmit","initialValues","name","number","validate","values","errors","test","setSubmitting","resetForm","touched","handleChange","handleSubmit","isSubmitting","type","placeholder","onChange","value","disabled","List","ul","Item","li","ContactList","contacts","onDeleteContact","map","id","onClick","propTypes","PropTypes","func","isRequired","InputFilter","LabelFilter","Filter","App","state","contactsList","filter","changeFilter","event","setState","target","getVisibleContacts","normalizedFilter","toLowerCase","contact","includes","deleteContact","contactId","prevState","addContact","uuid","find","alert","localStorage","getItem","parsedContact","JSON","parse","this","stringify","setItem","visibleContacts","Component","ReactDOM","render","StrictMode","theme","colors","white","black","green","red","blue","primaryText","secondaryText","document","getElementById"],"mappings":"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","file":"static/js/main.00278473.chunk.js","sourcesContent":["import styled from \"@emotion/styled\";\n\nexport const PhoneBook = styled.div`\n  max-width: 600px;\n  margin-top: 30px;\n  margin-left: auto;\n  margin-right: auto;\n  padding: 15px 30px;\n  background-color: rgb(207, 86, 255);\n  box-shadow: 0 15px 15px rgba(0, 0, 0, 0.55);\n  border-radius: 10px;\n  width: 420px;\n`;\n\nexport const Title = styled.h1`\n  /* font-size: 50px; */\n`;\n","import { Title, PhoneBook } from \"./Container.styled\";\n\nconst Container = ({ title, children }) => {\n  return (\n    <PhoneBook>\n      {title && <Title>{title}</Title>}\n      {children}\n    </PhoneBook>\n  );\n};\n\nexport default Container;\n","import styled from \"@emotion/styled\";\n\nexport const Form = styled.form`\n  flex-direction: column;\n  border-radius: 15px;\n  background-color: purple;\n  padding: 25px;\n`;\n\nexport const Input = styled.input`\n  width: 200px;\n  padding: 5px 10px;\n  border-radius: 10px;\n  border: none;\n  outline: none;\n  font-size: 14px;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  margin-bottom: 20px;\n  font-size: 18px;\n  font-weight: 400;\n`;\n\nexport const Button = styled.button`\n  width: max-content;\n  margin-right: auto;\n  margin-left: auto;\n  cursor: pointer;\n  padding: 5px 10px;\n  border: none;\n  outline: none;\n  border-radius: 10px;\n  box-shadow: 2px 2px 2px rgba(0, 0, 0, 0.3);\n  transition: transform 0.25s cubic-bezier(0.77, 0, 0.175, 1);\n  font-size: large;\n  background-color: rgb(192, 138, 243);\n  color: purple;\n\n  &:hover {\n    background-color: rgb(177 117 250);\n    transform: scale(1.05);\n    border: none;\n    outline: none;\n  }\n`;\n\nexport const Error = styled.span`\n  font-size: 11px;\n  left: 400px;\n  bottom: 0px;\n  color: coral;\n  margin: 10px;\n`;\n\nexport const Name = styled.p`\n  color: white;\n`;\n\nexport const Number = styled.p`\n  color: white;\n`;\n","import { Formik } from \"formik\";\nimport {\n  Form,\n  Input,\n  Label,\n  Button,\n  Error,\n  Name,\n  Number,\n} from \"./ContactForm.styled\";\n\nexport default function ContactForm({ onSubmit }) {\n  return (\n    <Formik\n      initialValues={{ name: \"\", number: \"\" }}\n      validate={(values) => {\n        const errors = {};\n        if (!values.name) {\n          errors.name = \"Обязательное поле\";\n        } else if (!values.number) {\n          errors.number = \"Обязательное поле\";\n        } else if (\n          !/^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/i.test(\n            values.name\n          )\n        ) {\n          errors.name =\n            \"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\";\n        } else if (\n          !/\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/i.test(\n            values.number\n          )\n        ) {\n          errors.number =\n            \"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\";\n        }\n        return errors;\n      }}\n      onSubmit={(values, { setSubmitting, resetForm }) => {\n        onSubmit(values);\n        setSubmitting(false);\n        resetForm();\n      }}\n    >\n      {({\n        values,\n        touched,\n        errors,\n        handleChange,\n        handleSubmit,\n        isSubmitting,\n      }) => (\n        <Form onSubmit={handleSubmit}>\n          <Label>\n            <Name>Name</Name>\n            <Input\n              type=\"text\"\n              name=\"name\"\n              placeholder=\"Patricia Manterola\"\n              onChange={handleChange}\n              value={values.name}\n            />\n            {touched.name && errors.name && <Error>{errors.name}</Error>}\n          </Label>\n          <Label>\n            <Number>Number</Number>\n            <Input\n              type=\"tel\"\n              name=\"number\"\n              placeholder=\"0669365879\"\n              onChange={handleChange}\n              value={values.number}\n            />\n            {touched.number && errors.number && <Error>{errors.number}</Error>}\n          </Label>\n          <Button\n            type=\"submit\"\n            disabled={\n              isSubmitting || values.name === \"\" || values.number === \"\"\n            }\n          >\n            Add contacts\n          </Button>\n        </Form>\n      )}\n    </Formik>\n  );\n}\n","import styled from \"@emotion/styled\";\n\nexport const List = styled.ul`\n  padding: 10px 30px;\n`;\n\nexport const Item = styled.li`\n  display: flex;\n  justify-content: space-between;\n  font-size: 16px;\n  color: white;\n\n  &:not(:last-child) {\n    margin-bottom: 8px;\n  }\n`;\n\nexport const Button = styled.button`\n  margin-left: 20px;\n  cursor: pointer;\n  padding: 5px 15px;\n  border: none;\n  outline: none;\n  border-radius: 10px;\n  box-shadow: 2px 2px 2px rgba(0, 0, 0, 0.3);\n  transition: transform 0.25s cubic-bezier(0.77, 0, 0.175, 1);\n  color: purple;\n\n  &:hover {\n    background-color: rgb(243, 65, 65);\n    transform: scale(1.05);\n    border: none;\n    outline: none;\n  }\n`;\n","import PropTypes from \"prop-types\";\nimport { List, Item, Button } from \"./ContactList.styled\";\n\nexport default function ContactList({ contacts, onDeleteContact }) {\n  return (\n    <List>\n      {contacts.map(({ name, number, id }) => (\n        <Item key={id}>\n          {name}: {number}\n          <Button type=\"button\" onClick={() => onDeleteContact(id)}>\n            Delete\n          </Button>\n        </Item>\n      ))}\n    </List>\n  );\n}\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.objectOf(PropTypes.string)).isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nButton.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n","import styled from \"@emotion/styled\";\n\nexport const InputFilter = styled.input`\n  padding: 5px 10px;\n  border-radius: 10px;\n  border: none;\n  outline: none;\n  margin-left: 10px;\n  margin-bottom: 20px;\n  margin-top: 5px;\n`;\n\nexport const LabelFilter = styled.label`\n  color: purple;\n  font-size: 18px;\n  font-weight: 600;\n`;\n","import PropTypes from \"prop-types\";\nimport { InputFilter, LabelFilter } from \"./Filter.styled\";\n\nexport default function Filter({ value, onChange }) {\n  return (\n    <LabelFilter>\n      Find contacts by name\n      <InputFilter type=\"text\" value={value} onChange={onChange} />\n    </LabelFilter>\n  );\n}\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n","import React, { Component } from \"react\";\nimport { v4 as uuid } from \"uuid\";\nimport Container from \"../Container/Container\";\nimport ContactForm from \"../ContactForm/ContactForm\";\nimport ContactList from \"../ContactList/ContactList\";\nimport Filter from \"../Filter/Filter\";\nimport contactsList from \"../data/contacts.json\";\n\nclass App extends Component {\n  state = {\n    contacts: contactsList,\n    filter: \"\",\n    name: \"\",\n    number: \"\",\n  };\n\n  componentDidMount() {\n    const contact = localStorage.getItem(\"contacts\");\n    const parsedContact = JSON.parse(contact);\n\n    if (parsedContact) {\n      this.setState({ contacts: parsedContact });\n    }\n  }\n\n  componentDidUpdate(prevState) {\n    const contact = JSON.stringify(this.state.contacts);\n    if (contact !== prevState.contacts) {\n      localStorage.setItem(\"contacts\", contact);\n    }\n  }\n\n  // Возьми свое решение задания из предыдущей домашней работы и добавь хранение контактов телефонной книги в localStorage. Используй методы жизненного цикла.\n\n  // При добавлении и удалении контакта, контакты сохраняются в локальное хранилище.\n  // При загрузке приложения, контакты, если таковые есть, считываются из локального хранилища и записываются в состояние.\n\n  changeFilter = (event) => {\n    this.setState({ filter: event.target.value });\n  };\n\n  getVisibleContacts = () => {\n    const { contacts, filter } = this.state;\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  deleteContact = (contactId) => {\n    this.setState((prevState) => ({\n      contacts: prevState.contacts.filter(\n        (contact) => contact.id !== contactId\n      ),\n    }));\n  };\n\n  addContact = ({ name, number }) => {\n    const contact = {\n      id: uuid(),\n      name,\n      number,\n    };\n\n    if (this.state.contacts.find((contact) => contact.name === name)) {\n      alert(`${name} is already in contacts.`);\n      return;\n    }\n\n    this.setState(({ contacts }) => ({\n      contacts: [contact, ...contacts],\n    }));\n  };\n\n  render() {\n    const { contacts, filter } = this.state;\n    const visibleContacts = this.getVisibleContacts();\n    return (\n      <>\n        <Container>\n          <h1>Phonebook</h1>\n          <ContactForm contacts={contacts} onSubmit={this.addContact} />\n\n          <h2>Contacts</h2>\n          <Filter value={filter} onChange={this.changeFilter} />\n          <ContactList\n            contacts={visibleContacts}\n            onDeleteContact={this.deleteContact}\n          />\n        </Container>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ThemeProvider } from \"@emotion/react\";\nimport \"./index.css\";\nimport App from \"./Components/App/App\";\n\nconst theme = {\n  colors: {\n    white: \"#ffffff\",\n    black: \"#010101\",\n    green: \"#4caf50\",\n    red: \"#f44336\",\n    blue: \"#2196f3\",\n    primaryText: \"212121\",\n    secondaryText: \"#757575\",\n  },\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}